Please write the implementation for the logic described below. Don't try to rush,
and don't try to polish your solution either. I'd prefer to see a good sane implementation,
just like you would do that if it was a real task for a real project.

	# Logic

		There is a set of Power Plants and a set of Households. Every Household can be
		connected to any number of Power Plants. Power Plant feeds the Household with the
		Electricity. The Household has Electricity if it's connected to one or more
		Power Plants.

		Each Power Plant is alive by default, but can be killed. The Power Plant which
		is not Alive will not generate any Electricity.

		Household can be connected to Household. The Household which has the Electricity
		also passes it to all the connected Households.

		The Power Plant can be repaired after killed.

	# Our expectations

		While I expect that you will treat that just like any other ticket in your
		real project, I also wanted to share some of our expectations. These expectations
		are relevant in our project on a daily basis anyways.

		1. I expect your solution to be so easy to understand that even my grannie will understand it.
		2. I expect your abstractions to be solid and clean.
		3. I expect your code to be easy to read.
		4. I expect your solution to be sane and align with common sense.

# Tests
•	Household has no electricity by default
•	Household has electricity if connected to a Power Plant
•	Household won't have Electricity after disconnecting from the only Power Plant
•	Household will have Electricity as long as there's at least 1 alive Power Plant connected
•	Household won't have Electricity if the only Power Plant dies
•	Power Plant can be repaired
*/

class World {
	constructor() {
	}

	createPowerPlant() {
		throw new Error('Not Implemented');
	}

	createHousehold() {
		throw new Error('Not Implemented');
	}

	connectHouseholdToPowerPlant(household, powerPlant) {
		throw new Error('Not Implemented');
	}

	connectHouseholdToHousehold(household1, household2) {
		throw new Error('Not Implemented');
	}

	disconnectHouseholdFromPowerPlant(household, powerPlant) {
		throw new Error('Not Implemented');
	}

	killPowerPlant(powerPlant) {
		throw new Error('Not Implemented');
	}

	repairPowerPlant(powerPlant) {
		throw new Error('Not Implemented');
	}

	householdHasEletricity(household) {
		throw new Error('Not Implemented');
	}
}

